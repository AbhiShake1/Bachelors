CREATE class Course

    DECLARE private instance variables courseID, courseName, courseLeader of type String
    Declare private instance variable duration of type int
    
    CREATE CONSTRUCTOR Course(TAKE parameters courseID, courseName of String type AND duration of int type)
        ASSIGN value of parameter courseID to instance variable courseID of the class
        ASSIGN value of parameter coursenamme to instance variable coursename of the class
        ASSIGN value of parameter duration to instance variable duration of the class
        INITIALIZE courseLeader to empty string
    END CONSTRUCTOR
            
    DEFINE METHOD getCourseID
        RETURN courseID
    END METHOD
    
    DEFINE METHOD getName
        RETURN courseName
    END METHOD
    
    DEFINE METHOD getCourseLeader
        RETURN courseLeader
    END METHOD
    
    DEFINE METHOD getDuration
        RETURN duration
    END METHOD
    
    DEFINE METHOD setCourseLeader(TAKE parameter courseLeader of type String)
        ASSIGN value of courseLeader to instance variable courseLeader of the class
    END METHOD 
    
    DEFINE METHOD display
        PRINT "courseID: " AND value of courseID variable
        PRINT "courseName: " AND value of courseName variable
        PRINT "courseDuration: " AND value of courseDuration variable
        IF courseLeader variable does not have an empty value ""
            PRINT "courseLeader: " AND value of courseLeader variable
        END IF
    END METHOD
    
END CLASS



CREATE CLASS NonAcademicCourse that EXTENDS Course class

    DECLARE private instance variables instructorName, startDate, completionDate, examDate, prerequisite of type String
    
    Declare private instance variable duration of type int
    
    Declare private instance variables isRegistered, isRemoved of type boolean
    
    CREATE CONSTRUCTOR NonAcademicCourse(TAKE parameters courseID, courseName, prerequisite of type String, duration of type int)
        CALL Course(PASS arguments courseID, courseName, duration)
        ASSIGN value of parameter prerequisite to instance variable prerequisite of the class
        INITIALIZE startDate, completionDate, examDate to empty String ""
        INITIALIZE isRegistered to False
    END CONSTRUCTOR
    
    DEFINE METHOD getInstructorName
        RETURN instructorName
    END METHOD
    
    DEFINE METHOD getDuration
        RETURN duration
    END METHOD
    
    DEFINE METHOD getStartDate
        RETURN startDate
    END METHOD
    
    DEFINE METHOD getCompletionDate
        RETURN completionDate
    END METHOD
    
    DEFINE METHOD getExamDate
        RETURN examDate
    END METHOD
    
    DEFINE METHOD getPrerequisite
        RETURN prerequisite
    END METHOD
    
    DEFINE METHOD getRegistered
        RETURN isRegistered
    END METHOD
    
    DEFINE METHOD getRemoved
        RETURN isRemoved
    END METHOD
    
    DEFINE METHOD setRemomved(TAKE parameter isRemoved of type boolean)
        ASSIGN value of isRemoved to instance variable isRemoved of the class
    END METHOD
    
    DEFINE METHOD setInstructorName(TAKE parameter instructorName of type String)
        IF not isRegitered
            THEN ASSIGN value of instructorName to instance variable instructorName of the class
            
            ELSE PRINT "It is not possible to change instructor name since non academic course has already been registered"
        END IF
    END METHOD
    
    DEFINE METHOD register(TAKE parameters courseLeader, instructorName, startDate, completionDate, examDate of type String)
        IF not isRegestered
            CALL setInstuctorName PASS instructorName as argument
            ASSIGN value of startDate to instance variable startDate of the class
            ASSIGN value of completionDate to instance variable completionDate of the class
            ASSIGN value of examDate to instance variable examDate of the class
            SET value of isRegistered to true
        
            ELSE PRINT "The course has already been registered"
        END IF
    END METHOD
    
    DEFINE METHOD remove
        IF isRemoved
            PRINT "The course has already been removed"
            ELSE
                CALL from super class setCourseLeader PASS "" as argument
                SET value of startDate to empty String ""
                SET value of completionDate to empty String ""
                SET value of examDate to empty String ""
                SET value of isRegestered to false
                SET value of isRemoved to true
            END IF
        END IF
    END METHOD
    
END CLASS
    
CREATE CLASS AcademicCourse that EXTENDS Course class 
    DECLARE private instance variables lecturerName, level, credit, startingDate, completionDate of type String
    DECLARE private variable noOfAssessments of type int
    DECLARE private variables isRegistered, courseRemovedStatus of type boolean
        
    CREATE CONSTRUCTOR AcademicCourse(TAKE parameters courseID, courseName, level, credit of type String, duration, noOfAssessments of type int)
        CALL Course(PASS arguments courseID, courseName, duration) from superclass
        INITIALIZE lecturerName to empty String ""
        INITIALIZE startingDate to empty String ""
        INITIALIZE completionDate to empty String ""
        SET value isRegistered to false
    END CONSTRUCTOR 
        
    DEFINE METHOD getLecturerName
        RETURN lecturerName
    END METHOD
        
    DEFINE METHOD getLevel
        RETURN level
    END METHOD
        
    DEFINE METHOD getCredit
        RETURN credit
    END METHOD
        
    DEFINE METHOD getStartingDate
        RETURN startingDate
    END METHOD
        
    DEFINE METHOD getCompletionDate
        RETURN completionDate
    END METHOD
        
    DEFINE METHOD getRegistered
        RETURN isRegistered
    END METHOD
        
    DEFINE METHOD getNoOfAssessments
        RETURN noOfAssessments
    END METHOD
        
    DEFINE METHOD setLecturerName(TAKE parameters lecturerName of type String)
        ASSIGN value of lecturerName to instance variable lecturerName of the class
    END METHOD
        
    DEFINE METHOD setNoOfAssessments(TAKE parameters noOfAssessments of type int)
        ASSIGN value of noOfAssessments to instance variable noOfAssessments of the class
    END METHOD
        
    DEFINE METHOD register(TAKE parameters courseLeader, lecturerName, startingDate, completionDate of type String)
        IF isRegistered
            PRINT "Instructor name: " AND lecturerName
               PRINT "Starting date: " AND startingDate
               PRINT "Completion date: " AND completionDate
           ELSE 
                ASSIGN value of lecturerName to instance variable lecturerName of the class
                ASSIGN value of startingDate to instance variable startingDate of the class
                ASSIGN value of completionDate to instance variable completionDate of the class
                CALL setCourseLeader(PASS argument courseLeader) from superclass
                SET value of isRegisreted to true
                SET value of courseRemovedStatus to false
        END IF
       END METHOD 
           
    DEFINE METHOD display
            CALL display METHOD from superclass
            IF isRegistered
                PRINT "Lecturer name: " AND lecturerName
                PRINT "Level: " AND level
                PRINT "Starting date: " AND startingDate
                PRINT "Completion date: " AND completionDate    
                PRINT "Number of Assessments: " AND noOfAssessments
            END IF
    END METHOD 
          
END CLASS

CREATE CLASS INGCollege
    DECLARE private instance variable frame of type JFrame
    
    DECLARE private instsnace variables academicPanel and nonAcademicPanel of type JPanel
    
    DECLARE private instance constant eventHandler of type EventHandler and INITIALIZE it to new instance of EventHandler class
    
    DECLARE private constant List course that carries objects of Course classe and its sub classes and INITIALIZE it to new instance of ArrayList class
    
    DECLARE variable academicButton and nonAcademicButton of type JButton
    
    DECLARE constant textFields of type ArrayList that stores JTextField objects
    
    DECLARE variable ingCollege of type INGCollege
    
    DEFINE MAIN METHOD
        INITIALIZE INGCollege to new instance of INGCollege class
    END MAIN METHOD
    
    CREATE CONSTRUCTOR INGCollege
        CREATE ANONYMOUS CLASS
            DEFINE METHOD setUpNonAcademicPanel(TAKE parameter p of type JPanel)
                CALL addSwitcher(PASS p as argument)
        
                CALL setLabel(title="Non Academic Course", bounds=250,0,800,100, font size = 30)
                CALL setLabel(title="CourseID", bounds=20,90,70,20, font size = 15)
                CALL setLabel(title="Course Name", bounds=20,140,125,20, font size = 15)
                CALL setLabel(title="Instructor Name", bounds=400,90,125,20, font size = 15)
                CALL setLabel(title="Duration", bounds=400,140,130,20, font size = 15)
                CALL setLabel(title="prerequisite", bounds=20,195,125,20, font size = 15)
                CALL setLabel(title="Duration", bounds=400,290,130,20, font size = 15)
    
                CALL setTextField(PASS argument p, x=180, y=85, width=170)
                CALL setTextField(PASS argument p, x=180, y=135, width=170)
                CALL setTextField(PASS argument p, x=535, y=85, width=160)
                CALL setTextField(PASS argument p, x=535, y=135, width=160)
                CALL setTextField(PASS argument p, x=180, y=190, width=170)
                CALL setTextField(PASS argument p, x=180, y=240, width=170)
                CALL setTextField(PASS argument p, x=535, y=185, width=160)
                CALL setTextField(PASS argument p, x=535, y=285, width=160)
                CALL setTextField(PASS argument p, x=535, y=235, width=160)
    
                CALL setButton(PASS argument p, title="Remove", x=290, y=330, height=130)
                CALL setButton(PASS argument p, title="Add Non Academic Course", x=5, y=380, height=250)
                CALL setButton(PASS argument p, title="Display Non Academic Course", x=5, y=330, height=250)
                CALL setButton(PASS argument p, title="Clear", x=465, y=330, height=260)
                CALL setButton(PASS argument p, title="Register Non Academic Course", x=465, y=380, height=260)
            END METHOD
    
            DEFINE METHOD setUpAcademicPanel(TAKE parameter p of type JPanel)
                CALL addSwitcher(PASS p as argument)
        
                CALL setLabel(PASS argument p, title="Academic Course", bounds=250, 0, 800, 100, font size=30)
                CALL setLabel(PASS argument p, title="CourseID:", bounds=20, 90, 70, 20, font size=15)
                CALL setLabel(PASS argument p, title="Duration:", bounds=20, 140, 70, 20, font size=15)
                CALL setLabel(PASS argument p, title="Completion Date:", bounds=390, 290, 130, 20, font size=15)
                CALL setLabel(PASS argument p, title="Level:", bounds=400, 190, 70, 20, font size=15)
                CALL setLabel(PASS argument p, title="Course Name:", bounds=400, 90, 125, 20, font size=15)
                CALL setLabel(PASS argument p, title="No. of Assessments:", bounds=370, 140, 185, 20, font size=15)
                CALL setLabel(PASS argument p, title="Start Date:", bounds=400, 240, 125, 20, font size=15)
                CALL setLabel(PASS argument p, title="Credit:", bounds=20, 240, 125, 20, font size=15)
                CALL setLabel(PASS argument p, title="Lecturer Name:", bounds=20, 190, 125, 20, font size=15)
                CALL setLabel(PASS argument p, title="Course Leader:", bounds=20, 290, 125, 20, font size=15)
        
                CALL setTextField(PASS argument p, x=180, y=85, width=170)
                CALL setTextField(PASS argument p, x=535, y=85, width=160)
                CALL setTextField(PASS argument p, x=180, y=135, width=170)
                CALL setTextField(PASS argument p, x=535, y=190, width=160)
                CALL setTextField(PASS argument p, x=535, y=285, width=160)
                CALL setTextField(PASS argument p, x=535, y=235, width=160)
                CALL setTextField(PASS argument p, x=180, y=235, width=170)
                CALL setTextField(PASS argument p, x=535, y=135, width=160)
                CALL setTextField(PASS argument p, x=180, y=190, width=170)
                CALL setTextField(PASS argument p, x=180, y=235, width=170)
        
                CALL setButton(PASS argument p, title="Add Academic Course", x=5, y=380, height=250)
                CALL setButton(PASS argument p, title="Display Academic Course", x=5, y=330, height=250)
                CALL setButton(PASS argument p, title="Clear", x=465, y=330, height=260)
                CALL setButton(PASS argument p, title="Register Academic Course", x=465, y=380, height=260)
            END METHOD
            
            DEFINE METHOD addSwitcher(TAKE panel of type JPanel as parameter)
                INITIALIZE academicButton to new instance of JButton PASS "Academic" as argument
                INITIALIZE nonAcademicButton to new instance of JButton PASS "Non Academic" as argument
                SET blue background for academicButton
                SET grey background for nonAcademicButton
                SET academicButton bounds = 350, 5, 100, 20
                SET nonAcademicButton bounds = 450, 5, 135, 20
                ADD action listener for academicButton and nonAcademicButton
                ADD academicButton and nonAcademicButton to panel
            END METHOD
            
            DEFINE METHOD setLabel(TAKE panel of type JPanel, text of type String, x, y, width, height, fontSize of type int as parameter)
                CREATE ANONYMOUS CLASS that extends JLabel(TAKE text as parameter)
                    CREATE CONSTRUCTOR
                        SET bounds = x, y, width, height from parameter
                        SET fontSize = fontSize from parameter 
                        IF text contains "Academic"
                            SET blue foreground color
                        END IF
                        ELSE IF text cotains "Which"
                            SET red foreground color
                        END IF
                        ADD this JLabel to panel
                    END CONSTRUCTOR
                END ANONYMOUS CLASS
            END METHOD
            
            DEFINE METHOD setButton(TAKE panel of type JPanel, text of type String, x, y, width of type int as parameter)
                CREATE ANONYMOUS CLASS that extends JButton(TAKE text as parameter)
                    CREATE CONSTRUCTOR
                        SET bounds = x, y, width from parameter, 30
                        ADD action listener
                        ADD this JButton to panel
                    END CONSTRUCTOR
                END ANONYMOUS CLASS
            END METHOD
            
            DEFINE METHOD setTextField(TAKE panel of type JPanel, x, y, width of type int as parameter)
                CREATE ANONYMOUS CLASS that extends JTextField
                    CREATE CONSTRUCTOR
                        SET bounds = x, y, width from parameter, 25
                        ADD action listener
                        ADD this JTextField to panel
                    END CONSTRUCTOR
                END ANONYMOUS CLASS
            END METHOD
        END ANONYMOUS CLASS
    
        INITIALIZE frame variable to new instance of JFrame class(PASS "Course Registration" as argument)
        INITIALIZE academicPanel variable to new instance of JPanel class PASS null as argument
        INITIALIZE nonAcademicPanel variable to new instance of JPanel class PASS null as argument
        CALL setUpAcademicPanel(PASS academicPanel as argument)
        CALL setUpNonAcademicPanel(PASS nonAcademicPanel as argument)
        
        SET blue colored border in academicPanel
        SET size of academicPanel 740x500
        SET size of frame 740x500
        ADD academicPanel to frame
        
        SET blue colored border in nonAcademicPanel
        SET size of nonAcademicPanel 740x500
        
        ADD windowListener to frame PASS eventHandler as argument
        MAKE frame visible
    END CONSTRUCTOR
    
    DEFINE METHOD getFrame
        RETURN frame
    END METHOD
    
    CREATE INNER CLASS EventHandler that extends WindowAdapter and implements ActionListener
        DEFINE METHOD getText(TAKE index of type int as parameter)
            RETURN text of index-th object from textFields
        END METHOD
        
        DEFINE METHOD windowClosing(TAKE e of type WindowEvent as parameter)
            SHOW message dialog "Thank you for trying"
            TERMINATE the program
        END METHOD
        
        DEFINE METHOD actionPerformed(TAKE e of type ActionEvent as parameter)
            CASE OF "getActionCommand of e"
                "Clear" : SET text of all elements of textFields ArrayList to empty String ""
                "Add Academic Course" : CALL METHOD addAcademicCourse
                "Add Non Academic Course" : CALL METHOD addNonAcademicCourse
                "Display Academic Courses" :
                    IF an element e from courses ArrayList is AcademicCourse
                        CAST e to AcademicCourse and store in nac
                        CALL METHOD display from nac
                    END IF
                END 
                "Display Non Academic Courses" :
                    IF an element e from courses ArrayList is NonAcademicCourse
                        CAST e to NonAcademicCourse and store in nac
                        CALL METHOD display from nac
                    END IF
                END 
                "Remove" : CALL METHOD removeNonAcademicCourse
                "Register Academic Course" : CALL METHOD registerAcademicCourse
                "Register Non Academic Course" : CALL METHOD registerNonAcademicCourse
                "Academic" :
                    REMOVE nonAcademicPanel from frame
                    ADD academicPanel to frame
                    REPAINT frame
                END
                "Non Academic" :
                    REMOVE academicPanel from frame
                    ADD nonAcademicPanel to frame
                    REPAINT frame
                END
            END CASE
        END METHOD
        
        DEFINE METHOD showParseError(TAKE e of type Exception as parameter)
            DECLARE variable log and INITIALIZE by message of e
	    IF e is NumberFormatException
		PREPEND "Please input valid integer" to log
	    END IF
        END METHOD
        
        DECLARE variable removeNonAcademic of type NonAcademicCourse
        
        DEFINE METHOD removeNonAcademicCourse
            DECLARE constant courseID of type String
            CALL getText(PASS 10 as argument) and store result in courseID
            IF an element c in courses ArrayList is NonAcademicCourse AND its courseID is equal to courseID variable
                CAST c to NonAcademicCourse and ASSIGN the value to removeNonAcademic variable
                remove c from courses ArrayList
            END IF
            IF removeNonAcademic is not null AND courseID of removeNonAcademic object is equal to courseID variable
                CALL remove methid from removeNonAcademic object
            END IF
        END METHOD
        
        DEFINE METHOD addAcademicCourse
	    TRY
            	DECLARE constant courseID of type String
            	CALL getText(PASS 0 as argument) and store result in courseID
            	DECLARE constant courseName of type String
            	CALL getText(PASS 1 as argument) and store result in courseName
            	DECLARE constant duration of type int
            	CALL getText(PASS 2 as argument) and store result in duration
            	DECLARE constant level of type String
            	CALL getText(PASS 3 as argument) and store result in level
            	DECLARE constant credit of type int
            	CALL parseInt(PASS getText(PASS 6 as argument) as argument) and store result in credit
            	DECLARE constant noOfAssessments of type int
            	CALL parseInt(PASS getText(PASS 7 as argument) as argument) and store result in noOfAssessments
            	DECLARE variable course AND INITIALIZE it by new instance of AcademicCourse(PASS courseID, courseName, duration, level, credit, noOfAssessments as arguments)
		add course to courses ArrayList
	    CATCH Exception as e
		CALL showParseError(PASS e as argument)
	    END CATCH
	    END TRY
        END METHOD
        
        DEFINE METHOD addNonAcademicCourse
	    TRY
            	DECLARE constant courseID of type String
            	CALL getText(PASS 10 as argument) and store result in courseID
            	DECLARE constant courseName of type String
            	CALL getText(PASS 11 as argument) and store result in courseName
            	DECLARE constant duration of type int
            	CALL getText(PASS 13 as argument) and store result in duration
            	DECLARE prerequisite level of type String
            	CALL getText(PASS 14 as argument) and store result in prerequisite
            	DECLARE variable course AND INITIALIZE it by new instance of AcademicCourse(PASS courseID, courseName, duration, prerequisite as arguments)
		ADD course to courses ArrayList
	    CATCH Exception as e
		CALL showParseError(PASS e as argument)
	    END CATCH
	    END TRY
        END METHOD
        
        DEFINE METHOD addCourse(TAKE course of type Course as parameter)
            DECLARE variable text of type String
            DECLARE variable show of type boolean and INITIALIZE by false
            IF course is Academic Course
                THEN ASSIGN value of getText(PASS 0 as argument) to text
                ELSE ASSIGN value of getText(PASS 10 as argument) to text
            END IF
            IF value returned by getCourseID of an element c in courses ArrayList is equal to text
                SHOW warning message dialog "The course has already been added"
                REMOVE c object from courses ArrayList
                END METHOD
            END IF
	    ADD course to courses ArrayList
        END METHOD
        
        DEFINE METHOD registerAcademicCourse
            DECLARE constant courseLeader of type String
            CALL getText(PASS 9 as argument) and store result in courseLeader
            DECLARE constant lecturerName of type String
            CALL getText(PASS 8 as argument) and store result in lecturerName
            DECLARE constant startingDate of type String
            CALL getText(PASS 5 as argument) and store result in startingDate
            DECLARE constant completionDate of type String
            CALL getText(PASS 4 as argument) and store result in completionDate
            IF an element c in courses ArrayList is AcademicCourse AND getText(PASS 0 as argument) is equal to getCourseID of c object
                DECLARE variable ac of type AcademicCourse, CAST c to AcademicCourse and store result in ac
                CALL register method of ac object(PASS courseLeader, lecturerName, startingDate, completionDate as arguments)
            END IF
        END METHOD
        
        DEFINE METHOD registerNonAcademicCourse
            DECLARE constant courseLeader of type String
            CALL getText(PASS 15 as argument) and store result in courseLeader
            DECLARE constant courseName of type String
            CALL getText(PASS 11 as argument) and store result in courseName
            DECLARE constant startingDate of type String
            CALL getText(PASS 16 as argument) and store result in startingDate
            DECLARE constant completionDate of type String
            CALL getText(PASS 18 as argument) and store result in completionDate
            IF an element c in courses ArrayList is NonAcademicCourse AND getText(PASS 10 as argument) is equal to getCourseID of c object
                DECLARE variable nac of type NonAcademicCourse, CAST c to AcademicCourse and store result in nac
                CALL register method of nac object(PASS courseLeader, courseName, startingDate, completionDate as arguments)
            END IF
        END METHOD
    END INNER CLASS
END CLASS
